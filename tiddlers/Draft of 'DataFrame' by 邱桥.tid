caption: {{||Excerpt}}
created: 20220128143717620
creator: 邱桥
draft.of: DataFrame
draft.title: DataFrame
due: 20220129143717620
interval: 1
modified: 20220128174828894
modifier: 邱桥
priority: 0
tags: pandas数据结构 ?
title: Draft of 'DataFrame' by 邱桥
tmap.id: a50fbe02-b73d-44a5-b53d-83d438b2560a
type: text/vnd.tiddlywiki



* 二维数据，整个表格，多行多列
* 可看作值为series的字典
!! 组成
* 左侧一列：索引Index
* 顶端一行：列明columns
* 其余部分：数据体
!! 创建
*由字典创建，其中键为columns，值为数据列表/字典/[[Series]]，列表索引变为列索引。例：
```
data={
        'state':['Ohio','Ohio','Ohio','Nevada','Nevada'],
        'year':[2000,2001,2002,2001,2002],
        'pop':[1.5,1.7,3.6,2.4,2.9]
    }
df = pd.DataFrame(data)
```

* 文件中读取：参见[[pandas读取文件]]

!! 属性

* shape：返回(行数,列数)
* columns查看列名列表
* index查看索引列
* dtypes查看每列的数类型


!! 方法
!!! 查询
按数值、列表、区间、条件、函数五种方法
查询时，结果是一维则返回Series，否则返回DataFrame

** head()：查看前几行数据，返回DataFrame
** df[列名]：查询一列
** df[列名列表]：查询多列
**df.loc[索引]：查询一行
**df.loc索引列表：查询多行

*loc[行标签,列标签]方法，根据行、列的标签值查询，可直接被更改。标签可以传入
*具体的值
*标签列表
*标签的范围(格式为：起始标签:结束标签)（注意包括左右标签，和python的列表查询有所不同）
**例：df.loc['2018-01-03':'2018-01-05', 'bWendu']
**例：df.loc[:, "bWendu"] = df["bWendu"].str.replace("℃", "").astype('int32')
**意思是：筛选出df中所有的行，再筛选出标签为"bWendu"的列，此时筛选出了一列，让这个列等于一个新的列，这个新的列是"bWendu"这一列中所有字符串删除掉"℃"并转换为int32类型形成的新列
*条件表达式
**例：df.loc[df["yWendu"]< -10, :]
**意思是："yWendu"标签所对应的值小于-10的所有行


1. 使用单个label值查询数据
2. 使用值列表批量查询
3. 使用数值区间进行范围查询
4. 使用条件表达式查询
5. 调用函数查询

2. df.iloc方法，根据行、列的数字位置查询
3. df.where方法
4. df.query方法

set_index('ymd', inplace=True)：设置索引列为ymd这一列，直接改变这个DataFrame